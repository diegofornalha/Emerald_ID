"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = exports.KmsAuthorizer = void 0;
const fcl = __importStar(require("@onflow/fcl"));
const signer_1 = require("./signer");
Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return signer_1.Signer; } });
class KmsAuthorizer {
    constructor(kmsOptions, keyIdOrKeyIds) {
        const keyIds = typeof keyIdOrKeyIds === 'string' ? [keyIdOrKeyIds] : keyIdOrKeyIds;
        this.signer = new signer_1.Signer(kmsOptions, keyIds);
    }
    getSigner() {
        return this.signer;
    }
    async getPublicKey() {
        return await this.signer.getPublicKey();
    }
    async getFlowPublicKey(signatureAlgorithm = 3, // ECDSA_secp256k1
    hashAlgorithm = 3, // SHA3-256
    weights = [1000]) {
        return await this.signer.getFlowPublicKey(signatureAlgorithm, hashAlgorithm, weights);
    }
    authorize(fromAddress, keyIndexOrKeyIndexes) {
        const keyIndexes = typeof keyIndexOrKeyIndexes === 'number' ? [keyIndexOrKeyIndexes] : keyIndexOrKeyIndexes;
        return async (account = {}) => {
            const authzs = [];
            for (const keyIndex of keyIndexes) {
                authzs.push({
                    ...account,
                    tempId: [fromAddress, keyIndex].join("-"),
                    addr: fcl.sansPrefix(fromAddress),
                    keyId: Number(keyIndex),
                    resolve: null,
                    signingFunction: async (data) => {
                        return {
                            addr: fcl.withPrefix(fromAddress),
                            keyId: Number(data.keyId),
                            signature: await this.signer.sign(data.message, keyIndex)
                        };
                    }
                });
            }
            return authzs.length === 1 ? authzs[0] : authzs;
        };
    }
    ;
    async getAccount(address) {
        const { account } = await fcl.send([fcl.getAccount(address)]);
        return account;
    }
    ;
}
exports.KmsAuthorizer = KmsAuthorizer;
//# sourceMappingURL=authorizer.js.map