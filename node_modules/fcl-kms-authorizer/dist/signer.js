"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = void 0;
const client_kms_1 = require("@aws-sdk/client-kms");
const asn1_parser_1 = require("./asn1-parser");
const sha3_1 = require("sha3");
const rlp = __importStar(require("@onflow/rlp"));
class Signer {
    constructor(kmsOptions, keyIds) {
        this.keyIds = keyIds;
        this.kms = new client_kms_1.KMSClient(kmsOptions);
    }
    async sign(message, keyIndex = 0) {
        const digest = this._hashMessage(message);
        const asn1Signature = await this._sign(digest, this.keyIds[keyIndex]);
        const { r, s } = (0, asn1_parser_1.parseSignature)(asn1Signature);
        return Buffer.concat([this._pad32(r), this._pad32(s)]).toString('hex');
    }
    async signUserMessage(message, keyIndex = 0, userTag = 'FLOW-V0.0-user') {
        const digest = this._hashMessageWithUserTag(message, userTag);
        const asn1Signature = await this._sign(digest, this.keyIds[keyIndex]);
        const { r, s } = (0, asn1_parser_1.parseSignature)(asn1Signature);
        return Buffer.concat([this._pad32(r), this._pad32(s)]).toString('hex');
    }
    async getPublicKey() {
        const publicKeys = [];
        for (const keyId of this.keyIds) {
            const asn1PublicKey = await this._getPublicKey(keyId);
            const publicKey = (0, asn1_parser_1.parsePublicKey)(asn1PublicKey);
            publicKeys.push(publicKey.toString('hex').replace(/^04/, ''));
        }
        return publicKeys.join(',');
    }
    async getFlowPublicKey(signatureAlgorithm = 3, // ECDSA_secp256k1
    hashAlgorithm = 3, // SHA3-256
    weights = [1000]) {
        const flowPublicKeys = [];
        for (let i = 0; i < this.keyIds.length; i++) {
            const keyId = this.keyIds[i];
            const asn1PublicKey = await this._getPublicKey(keyId);
            const publicKey = (0, asn1_parser_1.parsePublicKey)(asn1PublicKey);
            const weight = weights[i] || 0;
            // ref. https://github.com/onflow/flow/blob/f678a4/docs/content/concepts/accounts-and-keys.md#supported-signature--hash-algorithms
            const flowPublicKey = rlp.encode([
                Buffer.from(publicKey.toString('hex').replace(/^04/, ''), 'hex'),
                signatureAlgorithm,
                hashAlgorithm,
                weight,
            ]).toString('hex');
            flowPublicKeys.push(flowPublicKey);
        }
        return flowPublicKeys.join(',');
    }
    _hashMessage(message) {
        const sha = new sha3_1.SHA3(256);
        sha.update(Buffer.from(message, 'hex'));
        return sha.digest();
    }
    _hashMessageWithUserTag(message, userTag) {
        const sha = new sha3_1.SHA3(256);
        return sha.update(this._toBytesWithTag(message, userTag)).digest();
    }
    _toBytesWithTag(str, userTag) {
        // ref: https://github.com/onflow/flow-go-sdk/blob/9bb50d/sign.go
        const tagBytes = Buffer.alloc(32);
        Buffer.from(userTag).copy(tagBytes);
        const strBytes = Buffer.from(str);
        return Buffer.concat([tagBytes, strBytes]);
    }
    async _getPublicKey(keyId) {
        const response = await this.kms.send(new client_kms_1.GetPublicKeyCommand({
            KeyId: keyId
        }));
        if (!(response.PublicKey instanceof Uint8Array)) {
            throw new TypeError('PublicKey is not Uint8Array');
        }
        return Buffer.from(response.PublicKey);
    }
    async _sign(digest, keyId) {
        const response = await this.kms.send(new client_kms_1.SignCommand({
            KeyId: keyId,
            Message: digest,
            MessageType: 'DIGEST',
            SigningAlgorithm: 'ECDSA_SHA_256',
        }));
        return Buffer.from(response.Signature);
    }
    _pad32(buf) {
        const paddedBuf = Buffer.alloc(32);
        buf.copy(paddedBuf, paddedBuf.length - buf.length);
        return paddedBuf;
    }
}
exports.Signer = Signer;
//# sourceMappingURL=signer.js.map