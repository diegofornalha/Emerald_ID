{"version":3,"file":"util-logger.umd.js","sources":["../../../node_modules/queue-microtask/index.js","../../util-actor/dist/actor.module.js","../../config/dist/config.module.js","../src/util-logger.js"],"sourcesContent":["let promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","import queueMicrotask from 'queue-microtask';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar mailbox = function mailbox() {\n  var queue = [];\n  var next;\n  return {\n    deliver: function deliver(msg) {\n      try {\n        queue.push(msg);\n\n        if (next) {\n          next(queue.shift());\n          next = undefined;\n        }\n\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    receive: function receive() {\n      return new Promise(function innerReceive(resolve) {\n        var msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    var observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nvar _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    var result = new _Pact();\n    var state = this.s;\n\n    if (state) {\n      var callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        var value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _for(test, update, body) {\n  var stage;\n\n  for (;;) {\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n\n    if (shouldContinue.then) {\n      stage = 0;\n      break;\n    }\n\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.s;\n      } else {\n        stage = 1;\n        break;\n      }\n    }\n\n    if (update) {\n      var updateValue = update();\n\n      if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n        stage = 2;\n        break;\n      }\n    }\n  }\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    do {\n      if (update) {\n        updateValue = update();\n\n        if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n          updateValue.then(_resumeAfterUpdate).then(void 0, reject);\n          return;\n        }\n      }\n\n      shouldContinue = test();\n\n      if (!shouldContinue || _isSettledPact(shouldContinue) && !shouldContinue.v) {\n        _settle(pact, 1, result);\n\n        return;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (_isSettledPact(result)) {\n        result = result.v;\n      }\n    } while (!result || !result.then);\n\n    result.then(_resumeAfterBody).then(void 0, reject);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      result = body();\n\n      if (result && result.then) {\n        result.then(_resumeAfterBody).then(void 0, reject);\n      } else {\n        _resumeAfterBody(result);\n      }\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n\n  function _resumeAfterUpdate() {\n    if (shouldContinue = test()) {\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n      } else {\n        _resumeAfterTest(shouldContinue);\n      }\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nvar INIT = \"INIT\";\nvar SUBSCRIBE = \"SUBSCRIBE\";\nvar UNSUBSCRIBE = \"UNSUBSCRIBE\";\nvar UPDATED = \"UPDATED\";\nvar SNAPSHOT = \"SNAPSHOT\";\nvar EXIT = \"EXIT\";\nvar TERMINATE = \"TERMINATE\";\nvar root = typeof self === \"object\" && self.self === self && self || typeof global === \"object\" && global.global === global && global || typeof window === \"object\" && window.window === window && window;\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nvar pid = 0;\nvar DEFAULT_TIMEOUT = 5000;\n\nvar _send = function send(addr, tag, data, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return new Promise(function (reply, reject) {\n    var expectReply = opts.expectReply || false;\n    var timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n\n    if (expectReply && timeout) {\n      setTimeout(function () {\n        return reject(new Error(\"Timeout: \" + timeout + \"ms passed without a response.\"));\n      }, timeout);\n    }\n\n    var payload = {\n      to: addr,\n      from: opts.from,\n      tag: tag,\n      data: data,\n      timeout: timeout,\n      reply: reply,\n      reject: reject\n    };\n\n    try {\n      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);\n      if (!expectReply) reply(true);\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, root.FCL_REGISTRY[addr], error);\n    }\n  });\n};\nvar kill = function kill(addr) {\n  delete root.FCL_REGISTRY[addr];\n};\n\nvar fromHandlers = function fromHandlers(handlers) {\n  if (handlers === void 0) {\n    handlers = {};\n  }\n\n  return function (ctx) {\n    try {\n      var _temp12 = function _temp12() {\n        var _loopInterrupt;\n\n        var _temp6 = _for(function () {\n          return !_loopInterrupt && 1;\n        }, void 0, function () {\n          return Promise.resolve(ctx.receive()).then(function (letter) {\n            var _temp5 = _finallyRethrows(function () {\n              return _catch(function () {\n                function _temp4() {\n                  return Promise.resolve(handlers[letter.tag](ctx, letter, letter.data || {})).then(function () {});\n                }\n\n                var _temp3 = function () {\n                  if (letter.tag === EXIT) {\n                    var _temp10 = function _temp10() {\n                      _loopInterrupt = 1;\n                    };\n\n                    var _temp11 = function () {\n                      if (typeof handlers[TERMINATE] === \"function\") {\n                        return Promise.resolve(handlers[TERMINATE](ctx, letter, letter.data || {})).then(function () {});\n                      }\n                    }();\n\n                    return _temp11 && _temp11.then ? _temp11.then(_temp10) : _temp10(_temp11);\n                  }\n                }();\n\n                return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);\n              }, function (error) {\n                console.error(ctx.self() + \" Error\", letter, error);\n              });\n            }, function (_wasThrown, _result) {\n              return;\n              if (_wasThrown) throw _result;\n              return _result;\n            });\n\n            if (_temp5 && _temp5.then) return _temp5.then(function () {});\n          });\n        });\n\n        var _temp7 = function () {\n          if (_temp6 && _temp6.then) return _temp6.then(function () {});\n        }();\n\n        if (_temp7 && _temp7.then) return _temp7.then(function () {});\n      };\n\n      var _temp13 = function () {\n        if (typeof handlers[INIT] === \"function\") return Promise.resolve(handlers[INIT](ctx)).then(function () {});\n      }();\n\n      return Promise.resolve(_temp13 && _temp13.then ? _temp13.then(_temp12) : _temp12(_temp13));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nvar spawn = function spawn(fn, addr) {\n  if (addr === void 0) {\n    addr = null;\n  }\n\n  if (addr == null) addr = ++pid;\n  if (root.FCL_REGISTRY[addr] != null) return addr;\n  root.FCL_REGISTRY[addr] = {\n    addr: addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {}\n  };\n  var ctx = {\n    self: function self() {\n      return addr;\n    },\n    receive: function receive() {\n      return root.FCL_REGISTRY[addr].mailbox.receive();\n    },\n    send: function send(to, tag, data, opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      opts.from = addr;\n      return _send(to, tag, data, opts);\n    },\n    sendSelf: function sendSelf(tag, data, opts) {\n      if (root.FCL_REGISTRY[addr]) _send(addr, tag, data, opts);\n    },\n    broadcast: function broadcast(tag, data, opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      opts.from = addr;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(root.FCL_REGISTRY[addr].subs), _step; !(_step = _iterator()).done;) {\n        var to = _step.value;\n\n        _send(to, tag, data, opts);\n      }\n    },\n    subscribe: function subscribe(sub) {\n      return sub != null && root.FCL_REGISTRY[addr].subs.add(sub);\n    },\n    unsubscribe: function unsubscribe(sub) {\n      return sub != null && root.FCL_REGISTRY[addr].subs[\"delete\"](sub);\n    },\n    subscriberCount: function subscriberCount() {\n      return root.FCL_REGISTRY[addr].subs.size;\n    },\n    hasSubs: function hasSubs() {\n      return !!root.FCL_REGISTRY[addr].subs.size;\n    },\n    put: function put(key, value) {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;\n    },\n    get: function get(key, fallback) {\n      var value = root.FCL_REGISTRY[addr].kvs[key];\n      return value == null ? fallback : value;\n    },\n    \"delete\": function _delete(key) {\n      delete root.FCL_REGISTRY[addr].kvs[key];\n    },\n    update: function update(key, fn) {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);\n    },\n    keys: function keys() {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs);\n    },\n    all: function all() {\n      return root.FCL_REGISTRY[addr].kvs;\n    },\n    where: function where(pattern) {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce(function (acc, key) {\n        var _extends2;\n\n        return pattern.test(key) ? _extends({}, acc, (_extends2 = {}, _extends2[key] = root.FCL_REGISTRY[addr].kvs[key], _extends2)) : acc;\n      }, {});\n    },\n    merge: function merge(data) {\n      if (data === void 0) {\n        data = {};\n      }\n\n      Object.keys(data).forEach(function (key) {\n        return root.FCL_REGISTRY[addr].kvs[key] = data[key];\n      });\n    }\n  };\n  if (typeof fn === \"object\") fn = fromHandlers(fn);\n  queueMicrotask(function () {\n    try {\n      return Promise.resolve(fn(ctx)).then(function () {\n        kill(addr);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n  return addr;\n}; // Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\n\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  var EXIT = \"@EXIT\";\n  var self = spawn(function (ctx) {\n    try {\n      var _exit2;\n\n      ctx.send(address, SUBSCRIBE);\n      return Promise.resolve(_for(function () {\n        return !_exit2 && 1;\n      }, void 0, function () {\n        return Promise.resolve(ctx.receive()).then(function (letter) {\n          if (letter.tag === EXIT) {\n            ctx.send(address, UNSUBSCRIBE);\n            _exit2 = 1;\n            return;\n          }\n\n          callback(letter.data);\n        });\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n  return function () {\n    return _send(self, EXIT);\n  };\n} // Returns a promise that returns a result\n// A SNAPSHOT handler will need to be created to handle the snapshot event\n//\n//  [SNAPSHOT]: (ctx, letter) => {\n//    letter.reply(ctx.all())\n//  }\n//\n\nfunction snapshoter(address, spawnFn) {\n  spawnFn(address);\n  return _send(address, SNAPSHOT, null, {\n    expectReply: true,\n    timeout: 0\n  });\n}\n\nexport { EXIT, INIT, SNAPSHOT, SUBSCRIBE, TERMINATE, UNSUBSCRIBE, UPDATED, kill, _send as send, snapshoter, spawn, subscriber };\n//# sourceMappingURL=actor.module.js.map\n","import { SUBSCRIBE, UNSUBSCRIBE, spawn, send, subscriber } from '@onflow/util-actor';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\nvar _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\";\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar _HANDLERS;\n\nvar first = function first(wants, fallback) {\n  if (wants === void 0) {\n    wants = [];\n  }\n\n  try {\n    if (!wants.length) return Promise.resolve(fallback);\n\n    var _wants = wants,\n        head = _wants[0],\n        rest = _wants.slice(1);\n\n    return Promise.resolve(get(head)).then(function (ret) {\n      return ret == null ? first(rest, fallback) : ret;\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar NAME = \"config\";\nvar PUT = \"PUT_CONFIG\";\nvar GET = \"GET_CONFIG\";\nvar GET_ALL = \"GET_ALL_CONFIG\";\nvar UPDATE = \"UPDATE_CONFIG\";\nvar DELETE = \"DELETE_CONFIG\";\nvar CLEAR = \"CLEAR_CONFIG\";\nvar WHERE = \"WHERE_CONFIG\";\nvar UPDATED = \"CONFIG/UPDATED\";\n\nvar identity = function identity(v) {\n  return v;\n};\n\nvar HANDLERS = (_HANDLERS = {}, _HANDLERS[PUT] = function (ctx, _letter, _ref) {\n  var key = _ref.key,\n      value = _ref.value;\n  if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n  ctx.put(key, value);\n  ctx.broadcast(UPDATED, _extends({}, ctx.all()));\n}, _HANDLERS[GET] = function (ctx, letter, _ref2) {\n  var key = _ref2.key,\n      fallback = _ref2.fallback;\n  if (key == null) throw new Error(\"Missing 'key' for config/get\");\n  letter.reply(ctx.get(key, fallback));\n}, _HANDLERS[GET_ALL] = function (ctx, letter) {\n  letter.reply(_extends({}, ctx.all()));\n}, _HANDLERS[UPDATE] = function (ctx, letter, _ref3) {\n  var key = _ref3.key,\n      fn = _ref3.fn;\n  if (key == null) throw new Error(\"Missing 'key' for config/update\");\n  ctx.update(key, fn || identity);\n  ctx.broadcast(UPDATED, _extends({}, ctx.all()));\n}, _HANDLERS[DELETE] = function (ctx, letter, _ref4) {\n  var key = _ref4.key;\n  if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n  ctx[\"delete\"](key);\n  ctx.broadcast(UPDATED, _extends({}, ctx.all()));\n}, _HANDLERS[CLEAR] = function (ctx, letter) {\n  var keys = Object.keys(ctx.all());\n\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    ctx[\"delete\"](key);\n  }\n\n  ctx.broadcast(UPDATED, _extends({}, ctx.all()));\n}, _HANDLERS[WHERE] = function (ctx, letter, _ref5) {\n  var pattern = _ref5.pattern;\n  if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n  letter.reply(ctx.where(pattern));\n}, _HANDLERS[SUBSCRIBE] = function (ctx, letter) {\n  ctx.subscribe(letter.from);\n  ctx.send(letter.from, UPDATED, _extends({}, ctx.all()));\n}, _HANDLERS[UNSUBSCRIBE] = function (ctx, letter) {\n  ctx.unsubscribe(letter.from);\n}, _HANDLERS);\nspawn(HANDLERS, NAME);\n\nfunction put(key, value) {\n  send(NAME, PUT, {\n    key: key,\n    value: value\n  });\n  return config();\n}\n\nfunction get(key, fallback) {\n  return send(NAME, GET, {\n    key: key,\n    fallback: fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\nfunction all() {\n  return send(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\nfunction update(key, fn) {\n  if (fn === void 0) {\n    fn = identity;\n  }\n\n  send(NAME, UPDATE, {\n    key: key,\n    fn: fn\n  });\n  return config();\n}\n\nfunction _delete(key) {\n  send(NAME, DELETE, {\n    key: key\n  });\n  return config();\n}\n\nfunction where(pattern) {\n  return send(NAME, WHERE, {\n    pattern: pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\nfunction subscribe(callback) {\n  return subscriber(NAME, function () {\n    return spawn(HANDLERS, NAME);\n  }, callback);\n}\n\nfunction clearConfig() {\n  return send(NAME, CLEAR);\n}\n\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(function (d) {\n      return put(d, values[d]);\n    });\n  }\n\n  return {\n    put: put,\n    get: get,\n    all: all,\n    first: first,\n    update: update,\n    \"delete\": _delete,\n    where: where,\n    subscribe: subscribe,\n    overload: overload\n  };\n}\n\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig[\"delete\"] = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\n\nvar noop = function noop(v) {\n  return v;\n};\n\nfunction overload(opts, callback) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  if (callback === void 0) {\n    callback = noop;\n  }\n\n  return new Promise(function (resolve, reject) {\n    try {\n      return Promise.resolve(all()).then(function (oldConfig) {\n        var _temp = _catch(function () {\n          config(opts);\n          var _callback = callback;\n          return Promise.resolve(all()).then(function (_all) {\n            return Promise.resolve(_callback(_all)).then(function (result) {\n              return Promise.resolve(clearConfig()).then(function () {\n                return Promise.resolve(config(oldConfig)).then(function () {\n                  resolve(result);\n                });\n              });\n            });\n          });\n        }, function (error) {\n          return Promise.resolve(clearConfig()).then(function () {\n            return Promise.resolve(config(oldConfig)).then(function () {\n              reject(error);\n            });\n          });\n        });\n\n        if (_temp && _temp.then) return _temp.then(function () {});\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n}\n\nexport { clearConfig, config };\n//# sourceMappingURL=config.module.js.map\n","import {config} from \"@onflow/config\"\n\nexport const LEVELS = Object.freeze({\n  \"debug\": 5,\n  \"info\": 4,\n  \"log\": 3,\n  \"warn\": 2,\n  \"error\": 1\n})\n\nconst buildLoggerMessageArgs = ({title, message}) => {\n  return [`\n    %c${title}\n    ============================\n    ${message}\n    ============================\n    `,\n    \"font-weight:bold;font-family:monospace;\"\n  ]\n}\n\nexport const log = async ({title, message, level, always = false}) => {\n  const configLoggerLevel =  await config.get(\"logger.level\", 0)\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch(level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break;\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}"],"names":["promise","queueMicrotask","cb","Promise","resolve","then","err","setTimeout","mailbox","queue","deliver","next","receive","msg","_iteratorSymbol","Symbol","_asyncIteratorSymbol","_catch","result","body","recover","LEVELS","Object","freeze","buildLoggerMessageArgs","title","message","log","level","always","config","get","configLoggerLevel","loggerMessageArgs","debug","console","info","warn","error"],"mappings":"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"}