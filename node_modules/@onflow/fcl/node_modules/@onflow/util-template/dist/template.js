function interleave(a, b, c) {
  if (a === void 0) {
    a = [];
  }

  if (b === void 0) {
    b = [];
  }

  if (c === void 0) {
    c = [];
  }

  if (!a.length && !b.length) return c;
  if (!a.length) return c;
  if (!b.length) return [].concat(c, [a[0]]);

  var _a = a,
      aHead = _a[0],
      aRest = _a.slice(1);

  var _b = b,
      bHead = _b[0],
      bRest = _b.slice(1);

  if (aHead !== undefined) c.push(aHead);
  if (bHead !== undefined) c.push(bHead);
  return interleave(aRest, bRest, c);
}

function recApply(d) {
  return function (arg1) {
    if (typeof arg1 === "function") {
      console.warn("\n        %cFCL/SDK Deprecation Notice\n        ============================\n\n        Interopolation of functions into template literals will not be a thing in future versions of the Flow-JS-SDK or FCL.\n        You can learn more (including a guide on common transition paths) here: https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\n\n        ============================\n      ", "font-weight:bold;font-family:monospace;");
      return recApply(d)(arg1(d));
    }

    return String(arg1);
  };
}

function template(head) {
  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  if (typeof head === "string") return function () {
    return head;
  };

  if (Array.isArray(head)) {
    return function (d) {
      return interleave(head, rest.map(recApply(d))).join("").trim();
    };
  }

  return head;
}

exports.interleave = interleave;
exports.template = template;
//# sourceMappingURL=template.js.map
